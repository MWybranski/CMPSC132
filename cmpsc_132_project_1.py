# -*- coding: utf-8 -*-
"""CMPSC 132 - Project 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DHMd53qB0Q0xSTtlPX3mBGPUfdC9wBiT
"""

class Product:
  def __init__(self,name,category,price,quantity,identifier):
    self.name = name
    self.category = category
    self.price = price
    self.quantity = quantity
    self.identifier = identifier


class Inventory:
  def __init__(self):
    self.currentInventory = []
    self.transactions = []

  def add_products(self, Product):
    return self.currentInventory.append(Product)

  def increase_stock(self, Product, amount):
    setattr(Product,'quantity',getattr(Product,'quantity') + amount)
    return getattr(Product,'quantity')

  def decrease_stock(self, Product, amount):
    setattr(Product,'quantity',getattr(Product,'quantity') - amount)
    return getattr(Product,'quantity')

  def retrieve_info(Product):
    info = input("What information would you like to see? Name, Category, Price, Quantity, or Identifier ")
    if info.lower() == "name":
      print(getattr(Product,'name'))
    elif info.lower() == "category":
      print(getattr(Product,'category'))
    elif info.lower() == "price":
      print(getattr(Product,'price'))
    elif info.lower() == "quantity":
      print(getattr(Product,'quantity'))
    elif info.lower() == "identifier":
      print(getattr(Product,'identifier'))
    else:
      print("You must enter a specific piece of information you would like to see")

  def record_transaction(self, Transaction):
    if getattr(Transaction, 'productsold') not in self.currentInventory:
      print("This product is not in the inventory.")

    elif getattr(getattr(Transaction, 'productsold'), 'quantity') < getattr(Transaction, 'pquantity'):
      print("Not enough of the product in stock.")

    else:
      self.transactions.append((getattr(Transaction, 'productsold'), getattr(Transaction, 'pquantity')))
      self.decrease_stock(getattr(Transaction, 'productsold'),getattr(Transaction, 'pquantity'))

  def stock_levels_report(self):
    print("The current report on stock levels:")
    for product in self.currentInventory:
      print(f"Product: {product.name}, Quantity: {product.quantity}")

  def sales_history_report(self):
    print("The current history report on sales:")
    for transaction in self.transactions:
      product, quantity = transaction
      print(f"Product: {product.name}, Quantity Sold: {quantity}, Revenue: ${product.price * quantity}")

  def revenue_report(self):
    total_revenue = 0
    for transaction in self.transactions:
      product, quantity = transaction
      total_revenue += product.price * quantity
    print("The total revenue is $" + str(total_revenue))


class Transaction:
  def __init__(self,productsold,pquantity):
    self.productsold = productsold
    self.pquantity = pquantity
    self.totamount = self.productsold.price * self.pquantity


hats = Product("Hats", "Apparel", 10.0, 10, "1")
shirts = Product("Shirts", "Apparel", 10.0, 20, "2")

inventory1 = Inventory()
inventory1.add_products(hats)
print(inventory1.currentInventory)
inventory1.increase_stock(hats, 3)
print(hats.quantity)
inventory1.decrease_stock(hats, 3)
print(hats.quantity)
Inventory.retrieve_info(hats)

transaction1 = Transaction(hats, 5)
transaction2 = Transaction(hats, 20)
transaction3 = Transaction(shirts, 5)
inventory1.record_transaction(transaction1)
inventory1.record_transaction(transaction2)
inventory1.record_transaction(transaction3)
print(transaction1.totamount)

inventory1.stock_levels_report()
inventory1.sales_history_report()
inventory1.revenue_report()

